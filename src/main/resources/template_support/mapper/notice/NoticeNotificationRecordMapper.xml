<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.autuan.templatebusinesssupport.notice.mappere.NoticeNotificationRecordMapper">
  <resultMap id="BaseResultMap" type="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecord">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="notification_id" jdbcType="BIGINT" property="notificationId" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="receiver_user_id" jdbcType="BIGINT" property="receiverUserId" />
    <result column="pull_time" jdbcType="TIMESTAMP" property="pullTime" />
    <result column="kind" jdbcType="INTEGER" property="kind" />
    <result column="del_flag" jdbcType="CHAR" property="delFlag" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="dept_id" jdbcType="BIGINT" property="deptId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, notification_id, state, receiver_user_id, pull_time, kind, del_flag, create_time, 
    create_by, update_by, update_time, remark, dept_id
  </sql>
  <select id="selectByExample" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from notice_notification_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from notice_notification_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from notice_notification_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecordExample">
    delete from notice_notification_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecord">
    insert into notice_notification_record (id, notification_id, state, 
      receiver_user_id, pull_time, kind, 
      del_flag, create_time, create_by, 
      update_by, update_time, remark, 
      dept_id)
    values (#{id,jdbcType=BIGINT}, #{notificationId,jdbcType=BIGINT}, #{state,jdbcType=INTEGER}, 
      #{receiverUserId,jdbcType=BIGINT}, #{pullTime,jdbcType=TIMESTAMP}, #{kind,jdbcType=INTEGER}, 
      #{delFlag,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, 
      #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, 
      #{deptId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into notice_notification_record
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.notificationId != null">
            notification_id,
          </if>
          <if test="record.state != null">
            state,
          </if>
          <if test="record.receiverUserId != null">
            receiver_user_id,
          </if>
          <if test="record.pullTime != null">
            pull_time,
          </if>
          <if test="record.kind != null">
            kind,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.remark != null">
            remark,
          </if>
          <if test="record.deptId != null">
            dept_id,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.notificationId != null">
            #{record.notificationId,jdbcType=BIGINT},
          </if>
          <if test="record.state != null">
            #{record.state,jdbcType=INTEGER},
          </if>
          <if test="record.receiverUserId != null">
            #{record.receiverUserId,jdbcType=BIGINT},
          </if>
          <if test="record.pullTime != null">
            #{record.pullTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.kind != null">
            #{record.kind,jdbcType=INTEGER},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=CHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.deptId != null">
            #{record.deptId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecordExample" resultType="java.lang.Long">
    select count(*) from notice_notification_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update notice_notification_record
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.notificationId != null">
            notification_id = #{record.notificationId,jdbcType=BIGINT},
          </if>
          <if test="record.state != null">
            state = #{record.state,jdbcType=INTEGER},
          </if>
          <if test="record.receiverUserId != null">
            receiver_user_id = #{record.receiverUserId,jdbcType=BIGINT},
          </if>
          <if test="record.pullTime != null">
            pull_time = #{record.pullTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.kind != null">
            kind = #{record.kind,jdbcType=INTEGER},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=CHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.deptId != null">
            dept_id = #{record.deptId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update notice_notification_record
    set id = #{record.id,jdbcType=BIGINT},
      notification_id = #{record.notificationId,jdbcType=BIGINT},
      state = #{record.state,jdbcType=INTEGER},
      receiver_user_id = #{record.receiverUserId,jdbcType=BIGINT},
      pull_time = #{record.pullTime,jdbcType=TIMESTAMP},
      kind = #{record.kind,jdbcType=INTEGER},
      del_flag = #{record.delFlag,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      dept_id = #{record.deptId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update notice_notification_record
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.notificationId != null">
            notification_id = #{record.notificationId,jdbcType=BIGINT},
          </if>
          <if test="record.state != null">
            state = #{record.state,jdbcType=INTEGER},
          </if>
          <if test="record.receiverUserId != null">
            receiver_user_id = #{record.receiverUserId,jdbcType=BIGINT},
          </if>
          <if test="record.pullTime != null">
            pull_time = #{record.pullTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.kind != null">
            kind = #{record.kind,jdbcType=INTEGER},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=CHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.deptId != null">
            dept_id = #{record.deptId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecord">
    update notice_notification_record
    set notification_id = #{notificationId,jdbcType=BIGINT},
      state = #{state,jdbcType=INTEGER},
      receiver_user_id = #{receiverUserId,jdbcType=BIGINT},
      pull_time = #{pullTime,jdbcType=TIMESTAMP},
      kind = #{kind,jdbcType=INTEGER},
      del_flag = #{delFlag,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecordExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_notification_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into notice_notification_record
    (id, notification_id, state, receiver_user_id, pull_time, kind, del_flag, create_time, 
      create_by, update_by, update_time, remark, dept_id)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.notificationId,jdbcType=BIGINT}, #{item.state,jdbcType=INTEGER}, 
        #{item.receiverUserId,jdbcType=BIGINT}, #{item.pullTime,jdbcType=TIMESTAMP}, #{item.kind,jdbcType=INTEGER}, 
        #{item.delFlag,jdbcType=CHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.createBy,jdbcType=VARCHAR}, 
        #{item.updateBy,jdbcType=VARCHAR}, #{item.updateTime,jdbcType=TIMESTAMP}, #{item.remark,jdbcType=VARCHAR}, 
        #{item.deptId,jdbcType=BIGINT})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into notice_notification_record (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'notification_id'.toString() == column.value">
          #{item.notificationId,jdbcType=BIGINT}
        </if>
        <if test="'state'.toString() == column.value">
          #{item.state,jdbcType=INTEGER}
        </if>
        <if test="'receiver_user_id'.toString() == column.value">
          #{item.receiverUserId,jdbcType=BIGINT}
        </if>
        <if test="'pull_time'.toString() == column.value">
          #{item.pullTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'kind'.toString() == column.value">
          #{item.kind,jdbcType=INTEGER}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=CHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=VARCHAR}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=VARCHAR}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=VARCHAR}
        </if>
        <if test="'dept_id'.toString() == column.value">
          #{item.deptId,jdbcType=BIGINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <insert id="upsertSelective" parameterType="map">
    insert into notice_notification_record
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.notificationId != null">
            notification_id,
          </if>
          <if test="record.state != null">
            state,
          </if>
          <if test="record.receiverUserId != null">
            receiver_user_id,
          </if>
          <if test="record.pullTime != null">
            pull_time,
          </if>
          <if test="record.kind != null">
            kind,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.remark != null">
            remark,
          </if>
          <if test="record.deptId != null">
            dept_id,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.notificationId != null">
            #{record.notificationId,jdbcType=BIGINT},
          </if>
          <if test="record.state != null">
            #{record.state,jdbcType=INTEGER},
          </if>
          <if test="record.receiverUserId != null">
            #{record.receiverUserId,jdbcType=BIGINT},
          </if>
          <if test="record.pullTime != null">
            #{record.pullTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.kind != null">
            #{record.kind,jdbcType=INTEGER},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=CHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.deptId != null">
            #{record.deptId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    on duplicate key update 
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.notificationId != null">
            notification_id = #{record.notificationId,jdbcType=BIGINT},
          </if>
          <if test="record.state != null">
            state = #{record.state,jdbcType=INTEGER},
          </if>
          <if test="record.receiverUserId != null">
            receiver_user_id = #{record.receiverUserId,jdbcType=BIGINT},
          </if>
          <if test="record.pullTime != null">
            pull_time = #{record.pullTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.kind != null">
            kind = #{record.kind,jdbcType=INTEGER},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=CHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.deptId != null">
            dept_id = #{record.deptId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <insert id="upsert" parameterType="top.autuan.templatebusinesssupport.notice.entity.NoticeNotificationRecord">
    insert into notice_notification_record
    (id, notification_id, state, receiver_user_id, pull_time, kind, del_flag, create_time, 
      create_by, update_by, update_time, remark, dept_id)
    values
    (#{id,jdbcType=BIGINT}, #{notificationId,jdbcType=BIGINT}, #{state,jdbcType=INTEGER}, 
      #{receiverUserId,jdbcType=BIGINT}, #{pullTime,jdbcType=TIMESTAMP}, #{kind,jdbcType=INTEGER}, 
      #{delFlag,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, 
      #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, 
      #{deptId,jdbcType=BIGINT})
    on duplicate key update 
    id = #{id,jdbcType=BIGINT}, 
    notification_id = #{notificationId,jdbcType=BIGINT}, 
    state = #{state,jdbcType=INTEGER}, 
    receiver_user_id = #{receiverUserId,jdbcType=BIGINT}, 
    pull_time = #{pullTime,jdbcType=TIMESTAMP}, 
    kind = #{kind,jdbcType=INTEGER}, 
    del_flag = #{delFlag,jdbcType=CHAR}, 
    create_time = #{createTime,jdbcType=TIMESTAMP}, 
    create_by = #{createBy,jdbcType=VARCHAR}, 
    update_by = #{updateBy,jdbcType=VARCHAR}, 
    update_time = #{updateTime,jdbcType=TIMESTAMP}, 
    remark = #{remark,jdbcType=VARCHAR}, 
    dept_id = #{deptId,jdbcType=BIGINT}
  </insert>
</mapper>