<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.autuan.templatebusinesssupport.base.mapper.FeedbackMapper">
  <resultMap id="BaseResultMap" type="top.autuan.templatebusinesssupport.base.entity.Feedback">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="feedback_type" jdbcType="INTEGER" property="feedbackType" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="message" jdbcType="VARCHAR" property="message" />
    <result column="pics" jdbcType="VARCHAR" property="pics" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="reply" jdbcType="VARCHAR" property="reply" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `member_id`, `feedback_type`, `title`, `message`, `pics`, `status`, `reply`, 
    `create_time`, `update_time`, `create_by`, `update_by`, `del_flag`
  </sql>
  <select id="selectByExample" parameterType="top.autuan.templatebusinesssupport.base.entity.FeedbackExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `feedback`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `feedback`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `feedback`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="top.autuan.templatebusinesssupport.base.entity.FeedbackExample">
    delete from `feedback`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="top.autuan.templatebusinesssupport.base.entity.Feedback">
    insert into `feedback` (`id`, `member_id`, `feedback_type`, 
      `title`, `message`, `pics`, 
      `status`, `reply`, `create_time`, 
      `update_time`, `create_by`, `update_by`, 
      `del_flag`)
    values (#{id,jdbcType=INTEGER}, #{memberId,jdbcType=BIGINT}, #{feedbackType,jdbcType=INTEGER}, 
      #{title,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, #{pics,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{reply,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, 
      #{delFlag,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into `feedback`
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            `id`,
          </if>
          <if test="record.memberId != null">
            `member_id`,
          </if>
          <if test="record.feedbackType != null">
            `feedback_type`,
          </if>
          <if test="record.title != null">
            `title`,
          </if>
          <if test="record.message != null">
            `message`,
          </if>
          <if test="record.pics != null">
            `pics`,
          </if>
          <if test="record.status != null">
            `status`,
          </if>
          <if test="record.reply != null">
            `reply`,
          </if>
          <if test="record.createTime != null">
            `create_time`,
          </if>
          <if test="record.updateTime != null">
            `update_time`,
          </if>
          <if test="record.createBy != null">
            `create_by`,
          </if>
          <if test="record.updateBy != null">
            `update_by`,
          </if>
          <if test="record.delFlag != null">
            `del_flag`,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.memberId != null">
            #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.feedbackType != null">
            #{record.feedbackType,jdbcType=INTEGER},
          </if>
          <if test="record.title != null">
            #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.message != null">
            #{record.message,jdbcType=VARCHAR},
          </if>
          <if test="record.pics != null">
            #{record.pics,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.reply != null">
            #{record.reply,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="top.autuan.templatebusinesssupport.base.entity.FeedbackExample" resultType="java.lang.Long">
    select count(*) from `feedback`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `feedback`
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            `id` = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.memberId != null">
            `member_id` = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.feedbackType != null">
            `feedback_type` = #{record.feedbackType,jdbcType=INTEGER},
          </if>
          <if test="record.title != null">
            `title` = #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.message != null">
            `message` = #{record.message,jdbcType=VARCHAR},
          </if>
          <if test="record.pics != null">
            `pics` = #{record.pics,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.reply != null">
            `reply` = #{record.reply,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            `create_time` = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            `update_time` = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            `create_by` = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            `update_by` = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            `del_flag` = #{record.delFlag,jdbcType=TINYINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `feedback`
    set `id` = #{record.id,jdbcType=INTEGER},
      `member_id` = #{record.memberId,jdbcType=BIGINT},
      `feedback_type` = #{record.feedbackType,jdbcType=INTEGER},
      `title` = #{record.title,jdbcType=VARCHAR},
      `message` = #{record.message,jdbcType=VARCHAR},
      `pics` = #{record.pics,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=INTEGER},
      `reply` = #{record.reply,jdbcType=VARCHAR},
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP},
      `update_time` = #{record.updateTime,jdbcType=TIMESTAMP},
      `create_by` = #{record.createBy,jdbcType=BIGINT},
      `update_by` = #{record.updateBy,jdbcType=BIGINT},
      `del_flag` = #{record.delFlag,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update `feedback`
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.memberId != null">
            `member_id` = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.feedbackType != null">
            `feedback_type` = #{record.feedbackType,jdbcType=INTEGER},
          </if>
          <if test="record.title != null">
            `title` = #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.message != null">
            `message` = #{record.message,jdbcType=VARCHAR},
          </if>
          <if test="record.pics != null">
            `pics` = #{record.pics,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.reply != null">
            `reply` = #{record.reply,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            `create_time` = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            `update_time` = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            `create_by` = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            `update_by` = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            `del_flag` = #{record.delFlag,jdbcType=TINYINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where `id` = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.autuan.templatebusinesssupport.base.entity.Feedback">
    update `feedback`
    set `member_id` = #{memberId,jdbcType=BIGINT},
      `feedback_type` = #{feedbackType,jdbcType=INTEGER},
      `title` = #{title,jdbcType=VARCHAR},
      `message` = #{message,jdbcType=VARCHAR},
      `pics` = #{pics,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      `reply` = #{reply,jdbcType=VARCHAR},
      `create_time` = #{createTime,jdbcType=TIMESTAMP},
      `update_time` = #{updateTime,jdbcType=TIMESTAMP},
      `create_by` = #{createBy,jdbcType=BIGINT},
      `update_by` = #{updateBy,jdbcType=BIGINT},
      `del_flag` = #{delFlag,jdbcType=TINYINT}
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="top.autuan.templatebusinesssupport.base.entity.FeedbackExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `feedback`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into `feedback`
    (`id`, `member_id`, `feedback_type`, `title`, `message`, `pics`, `status`, `reply`, 
      `create_time`, `update_time`, `create_by`, `update_by`, `del_flag`)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.memberId,jdbcType=BIGINT}, #{item.feedbackType,jdbcType=INTEGER}, 
        #{item.title,jdbcType=VARCHAR}, #{item.message,jdbcType=VARCHAR}, #{item.pics,jdbcType=VARCHAR}, 
        #{item.status,jdbcType=INTEGER}, #{item.reply,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, 
        #{item.delFlag,jdbcType=TINYINT})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into `feedback` (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'member_id'.toString() == column.value">
          #{item.memberId,jdbcType=BIGINT}
        </if>
        <if test="'feedback_type'.toString() == column.value">
          #{item.feedbackType,jdbcType=INTEGER}
        </if>
        <if test="'title'.toString() == column.value">
          #{item.title,jdbcType=VARCHAR}
        </if>
        <if test="'message'.toString() == column.value">
          #{item.message,jdbcType=VARCHAR}
        </if>
        <if test="'pics'.toString() == column.value">
          #{item.pics,jdbcType=VARCHAR}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'reply'.toString() == column.value">
          #{item.reply,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>